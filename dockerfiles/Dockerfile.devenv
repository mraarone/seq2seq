FROM pytorch/pytorch

# Install Docker for Docker-in-Docker
RUN apt-get update && \
    apt-get -qy full-upgrade && \
    apt-get install -qy curl && \
    curl -sSL https://get.docker.com/ | sh

# Install Libraries
RUN apt-get install sudo

### The rest installs in the virtual environment. ###
RUN apt-get install apt-utils -y
RUN apt-get update -y

# Install tzdata, it's not on Ubuntu, but is on CentOS and Debian.
# The sphinx install, below, requires tzdata.
# https://dev.to/0xbf/set-timezone-in-your-docker-image-d22
ENV TZ="America/Chicago"
RUN apt-get install -yq tzdata && \
    ln -fs /usr/share/zoneinfo/America/Chicago /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata

# Install Git 
RUN apt-get install git -y
RUN apt-get install openssh-client -y

# Setup the environment so that scripts/run.sh can be run using SSH key forwarding.
# WSL2 SSH key forwarding must be enabled in /etc/ssh_config or ~/.ssh/config
# Keys must be installed in WSL 2 (tested on Ubuntu 20.04) at .ssh/id_rsa, id_ed25519, etc.
# and ssh-agent must be running, like with the ssh-agent/add commands below. This runs on logon.
RUN mkdir /root/.ssh
RUN echo 'if [ ! -f ~/.ssh/known_hosts ]; then ssh-keyscan github.com >> ~/.ssh/known_hosts; fi' >> /root/.bashrc

# Install Java for SonarLint
# RUN apt-get install openjdk-11-jre -y
RUN apt-get install openjdk-11-jre-headless -y

# Install sphinx libraries for constant documentation
RUN apt-get install python3-sphinx -y

# Upgrade pip
RUN python3 -m pip install --upgrade pip

# Install Virtual Environment requirements
RUN apt-get install python3-venv -y

# https://pythonspeed.com/articles/activate-virtualenv-dockerfile/
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"
RUN echo '. $VIRTUAL_ENV/bin/activate' >> /root/.bashrc

# Install common python tools for open source DevSecOps
RUN python3 -m pip install make wheel
RUN python3 -m pip install setuptools make pre-commit isort bandit black mypy nox
RUN python3 -m pip install pylint safety liccheck coverage[toml] codecarbon wandb
RUN python3 -m pip install flake8 flake8-annotations-complexity flake8-cognitive-complexity flake8-expression-complexity flake8-functions
RUN python3 -m pip install sphinx 
RUN python3 -m pip install sphinx-autodoc-typehints
RUN python3 -m pip install xdoctest
RUN python3 -m pip install pre-commit

WORKDIR /workspaces

## GitHub
# To run the below git commands and be authorized using ssh, the keys 
# from above must  be in GitHub under Account Settings > SSH Keys.

## Initialize a repository
# git init
# git add README.md
# git commit -m "first commit"
# git branch -M main
# git remote add origin git@github.com:mraarone/seq2seq.git
# git push -u origin main

## Push existing repository from the commnd line
# git remote add origin git@github.com:mraarone/seq2seq.git
# git branch -M main
# git push -u origin main

## Clone a repository via HTTPS
RUN git clone https://git@github.com/mraarone/seq2seq.git

## Clone a repository via SSH
# Connect via SSH to pull the repository, use VSCode started from WSL2 in Windows
#
# This may require SSH keys, and a GitHub->Settings->Developer->SSH Keys configuration
# ssh-agent configuration for local docker and local VSCode will help follow this link:
# https://code.visualstudio.com/docs/remote/containers#_using-ssh-keys
#
# "Host key verification failed" will happen if you have a password for your id_ed25519 file.
# Don't have a passord for the ~/.ssh/id_* private key file used for GitHub rights.
# If so, restart the process to generate a key and upload it to GitHub:
# https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
# https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account
# RUN git clone git@github.com:mraarone/seq2seq.git

# Set up the Python environment and app location Note: You can't get away from the workspaces folder, 
# The environment variable, "CODESPACES_VIRTUAL_FOLDER," isn't known to be changeable. The project file 
# folders will be copied automatically, by codespaces, over this copy. But it is necessary for the build.
# /workspaces/seq2seq = ${containerWorkspaceFolder}

WORKDIR /workspaces/seq2seq

# Install precommit hooks.
RUN pre-commit install

# Install requirements from repo.
RUN python3 -m pip install -r requirements.txt

# Install sound analysis libraries
# RUN apt-get install libsndfile1 -y
# RUN python3 -m pip install librosa

# GitHub CodeSpaces does not use entrypoint.sh, it runs its own using the devcontainer configuration.
# When CodeSpaces does that, it detects and automatically activates the detected virtual environment,
# and sets the python intrepretor to that virtual environment.
#
# But, for docker on a developer's PC, the following gets executed.
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# RUN chown -R root:root /workspace

ENTRYPOINT ["/entrypoint.sh"]
